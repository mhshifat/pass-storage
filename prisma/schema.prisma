// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credential {
  id                  String @id @default(cuid())
  email               String @unique
  password            String
  provider            String

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user_id             String  @unique
  user                User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("credentials")
}

model User {
  id                  String @id @default(cuid())

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  credential          Credential?
  tokens              Token[]
  organizations       Organization[]

  @@map("users")
}

model Token {
  id                  String @id @default(cuid())
  name                String
  issuer              String
  secret              String
  algorithm           String
  digits              Int
  period              Int
  service_url         String
  username            String
  password            String

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user_id             String
  user                User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Organization {
  id                  String @id @default(cuid())
  name                String
  description         String?

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user_id             String
  user                User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  teams               Team[]
  invitations         Invitation[]
  members             Member[]
  @@map("organizations")
}

model Team {
  id                  String @id @default(cuid())
  name                String
  description         String?

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  org_id             String
  org                Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)

  @@map("teams")
}

model Invitation {
  id                  String @id @default(cuid())
  email               String  @unique

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  org_id              String
  org                 Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model Member {
  id                  String @id @default(cuid())
  user_id             String

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  org_id              String
  org                 Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)

  @@map("members")
}
